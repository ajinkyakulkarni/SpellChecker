['java', 'distribution', 'maven', 'signing'].each { apply plugin: it }

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

compileJava {
	sourceCompatibility javaVersion
	targetCompatibility javaVersion
	classpath += files("${projectDir.absolutePath}/../RSyntaxTextArea/build/classes/main",
		"${projectDir.absolutePath}/../AutoComplete/build/classes/main")
	options.debug = true
	options.debugOptions.debugLevel = 'source,vars,lines'
	options.compilerArgs << "-Xlint:deprecation"
}

ext.sharedManifest = manifest {
	attributes('Class-Path': 'rsyntaxtextarea.jar autocomplete.jar',
		'Specification-Title': 'SpellChecker',
		'Specification-Version': version,
		'Implementation-Title': 'org.fife.ui',
		'Implementation-Version': version)

}
jar {
	manifest { from sharedManifest }
}

// We use "distributions" to create the zip files uploaded to SourceForge
distributions {
	main {
		baseName = 'rsta_spellchecker'
		contents {
			from { [ 'build/libs' ] }
			rename 'SpellChecker-.*\\.jar', 'rsta_spellchecker.jar'
		}
	}
	src {
		baseName = 'rsta_spellchecker'
	}
}
distZip.classifier = null
distZip.dependsOn jar
srcDistZip.classifier = 'src'
srcDistZip {
	from projectDir
	include 'src/**/*'
	include 'build.gradle'
	include '.classpath'
	include '.project'
	include 'gradle.properties'
	include 'README.md'
	include '.settings/**'
}

task buildSourceForgeZips << {
	println "Building zip files for SourceForge"
}
buildSourceForgeZips.dependsOn clean, jar, distZip, srcDistZip

// Stuff to generate and upload Maven artifacts
javadoc {
	classpath += files("${projectDir.absolutePath}/../RSyntaxTextArea/build/classes/main",
		"${projectDir.absolutePath}/../AutoComplete/build/classes/main")
}
task javadocJar (type: Jar, dependsOn: javadoc) {
	manifest { from sharedManifest }
	classifier = 'javadoc'
	from javadoc.destinationDir
}
task sourceJar (type: Jar) {
	manifest { from sharedManifest }
	classifier = 'sources'
	from sourceSets.main.allSource
}
artifacts {
	archives jar, javadocJar, sourceJar
}
signing {
	sign configurations.archives
}
repositories {
	mavenCentral()
}
uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: 'file:///' + projectDir + '/../localMavenRepo')
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			pom.groupId = 'com.fifesoft'
		}
	}
}
